name: 🏛️ Dashboard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  # ===============================
  # Quality Assurance & Testing
  # ===============================
  test:
    name: 🧪 Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # Installa eventuali dipendenze future se necessarie
        # pip install -r requirements.txt
        
    - name: 🔍 File Integrity Check
      run: |
        cd dashboard-provinciale
        python3 server.py --check-only
        
    - name: ⚡ Performance Optimization Test
      run: |
        cd dashboard-provinciale
        python3 optimize.py
        
    - name: 📊 Bundle Size Analysis
      run: |
        cd dashboard-provinciale
        echo "📈 Original Bundle Sizes:"
        du -h *.html js/*.js css/*.css | sort -h
        echo "📉 Compressed Bundle Sizes:"
        du -h *.gz js/*.gz css/*.gz 2>/dev/null | sort -h || echo "No compressed files found"
        
    - name: 🌐 Server Startup Test
      run: |
        cd dashboard-provinciale
        timeout 10s python3 server.py --no-browser &
        sleep 5
        curl -f http://localhost:8000 || exit 1
        echo "✅ Server startup successful"

  # ===============================
  # Cross-Platform Testing
  # ===============================
  cross-platform-test:
    name: 🖥️ Cross-Platform Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 🔍 File Integrity Check
      run: |
        cd dashboard-provinciale
        python server.py --check-only
        
    - name: 🌐 Server Test
      shell: bash
      run: |
        cd dashboard-provinciale
        python server.py --no-browser &
        SERVER_PID=$!
        sleep 5
        
        # Test HTTP response
        if command -v curl &> /dev/null; then
          curl -f http://localhost:8000 || exit 1
        elif command -v wget &> /dev/null; then
          wget -q --spider http://localhost:8000 || exit 1
        fi
        
        # Cleanup
        kill $SERVER_PID 2>/dev/null || true
        echo "✅ Cross-platform test passed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"

  # ===============================
  # Security & Code Quality
  # ===============================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔍 Run Security Scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true
      
    - name: 📋 Check for Sensitive Data
      run: |
        echo "🔍 Scanning for potential sensitive data..."
        
        # Check for potential secrets
        if grep -r -i "password\|secret\|token\|key\|api" dashboard-provinciale/ --exclude-dir=.git; then
          echo "⚠️ Potential sensitive data found. Please review."
        else
          echo "✅ No obvious sensitive data found"
        fi
        
        # Check for TODO/FIXME comments
        if grep -r "TODO\|FIXME\|HACK" dashboard-provinciale/ --exclude-dir=.git; then
          echo "📝 Found TODO/FIXME comments for future improvements"
        fi

  # ===============================
  # Documentation Check
  # ===============================
  docs-check:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📖 Validate README
      run: |
        cd dashboard-provinciale
        if [[ -f "README.md" && -s "README.md" ]]; then
          echo "✅ README.md exists and is not empty"
          # Check for essential sections
          if grep -q "Avvio Rapido" README.md && \
             grep -q "Architettura" README.md && \
             grep -q "Compatibilità" README.md; then
            echo "✅ README contains essential sections"
          else
            echo "⚠️ README might be missing essential sections"
          fi
        else
          echo "❌ README.md is missing or empty"
          exit 1
        fi
        
    - name: 📋 Validate WORKFLOW
      run: |
        cd dashboard-provinciale
        if [[ -f "WORKFLOW.md" && -s "WORKFLOW.md" ]]; then
          echo "✅ WORKFLOW.md exists and contains developer documentation"
        else
          echo "⚠️ WORKFLOW.md is missing - consider adding developer documentation"
        fi
        
    - name: 📜 Validate LICENSE
      run: |
        cd dashboard-provinciale
        if [[ -f "LICENSE" && -s "LICENSE" ]]; then
          echo "✅ LICENSE file exists"
        else
          echo "❌ LICENSE file is missing"
          exit 1
        fi

  # ===============================
  # Performance Benchmark
  # ===============================
  performance-benchmark:
    name: ⚡ Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ⚡ Run Performance Tests
      run: |
        cd dashboard-provinciale
        echo "📊 Running performance optimization..."
        python3 optimize.py
        
        echo "📈 Bundle size analysis:"
        ORIGINAL_SIZE=$(du -sb index.html js/data.js js/main.js css/style.css | awk '{sum += $1} END {print sum}')
        COMPRESSED_SIZE=$(du -sb *.gz js/*.gz css/*.gz 2>/dev/null | awk '{sum += $1} END {print sum}' || echo "0")
        
        if [ "$COMPRESSED_SIZE" -gt 0 ]; then
          REDUCTION=$(echo "scale=1; ($ORIGINAL_SIZE - $COMPRESSED_SIZE) * 100 / $ORIGINAL_SIZE" | bc -l)
          echo "📉 Compression ratio: ${REDUCTION}%"
          
          # Performance gate: fail if compression ratio is less than 70%
          if (( $(echo "$REDUCTION < 70" | bc -l) )); then
            echo "❌ Performance gate failed: compression ratio below 70%"
            exit 1
          else
            echo "✅ Performance gate passed: compression ratio ${REDUCTION}%"
          fi
        fi
        
    - name: 📊 Create Performance Report
      run: |
        cd dashboard-provinciale
        echo "# 📊 Performance Report" > performance-report.md
        echo "Generated on: $(date)" >> performance-report.md
        echo "" >> performance-report.md
        echo "## Bundle Sizes" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        du -h *.html js/*.js css/*.css >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        echo "" >> performance-report.md
        echo "## Compressed Sizes" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        du -h *.gz js/*.gz css/*.gz 2>/dev/null >> performance-report.md || echo "No compressed files" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        
    - name: 📤 Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: dashboard-provinciale/performance-report.md

  # ===============================
  # Deployment (only on main branch)
  # ===============================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, cross-platform-test, security-scan, docs-check, performance-benchmark]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🏗️ Prepare Deployment
      run: |
        cd dashboard-provinciale
        echo "🏗️ Preparing deployment package..."
        
        # Run optimization
        python3 optimize.py
        
        # Create deployment package
        mkdir -p ../deploy
        
        # Copy essential files
        cp -r . ../deploy/
        
        # Remove development files
        rm -f ../deploy/optimize.py
        rm -f ../deploy/.git* 2>/dev/null || true
        
        echo "✅ Deployment package ready"
        
    - name: 📦 Create Deployment Artifact
      uses: actions/upload-artifact@v3
      with:
        name: dashboard-deployment-${{ github.sha }}
        path: deploy/
        retention-days: 30

  # ===============================
  # Release Creation (on tags)
  # ===============================
  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, cross-platform-test, security-scan, docs-check, performance-benchmark]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🏗️ Prepare Release Package
      run: |
        cd dashboard-provinciale
        
        # Run optimization for release
        python3 optimize.py
        
        # Create release package
        tar -czf ../dashboard-socioeconomica-pu-${{ github.event.release.tag_name }}.tar.gz \
          --exclude='.git*' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          .
          
    - name: 📤 Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: dashboard-socioeconomica-pu-${{ github.event.release.tag_name }}.tar.gz
        asset_name: dashboard-socioeconomica-pu-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  # ===============================
  # Notification
  # ===============================
  notification:
    name: 📢 Build Notification
    runs-on: ubuntu-latest
    needs: [test, cross-platform-test, security-scan, docs-check, performance-benchmark]
    if: always()
    
    steps:
    - name: 📊 Build Summary
      run: |
        echo "🏛️ Dashboard Socio-Economica Build Summary"
        echo "============================================"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Event: ${{ github.event_name }}"
        echo "============================================"
        
        if [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.cross-platform-test.result }}" == "success" ] && \
           [ "${{ needs.security-scan.result }}" == "success" ] && \
           [ "${{ needs.docs-check.result }}" == "success" ] && \
           [ "${{ needs.performance-benchmark.result }}" == "success" ]; then
          echo "✅ All checks passed! Dashboard is ready for deployment."
        else
          echo "❌ Some checks failed. Please review the build logs."
          echo "Test: ${{ needs.test.result }}"
          echo "Cross-platform: ${{ needs.cross-platform-test.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Docs: ${{ needs.docs-check.result }}"
          echo "Performance: ${{ needs.performance-benchmark.result }}"
        fi